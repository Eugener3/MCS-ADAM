import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { MinecraftService } from 'src/minecraft/minecraft.service';
import { DataSource } from 'typeorm';
import * as Bot from 'node-telegram-bot-api';
import { BotCommands } from './enums/bot-commands.enum';
import { ServerModel } from 'src/minecraft/models/server.model';

@Injectable()
export class TelegramService implements OnModuleInit {
  private readonly logger = new Logger(TelegramService.name);
  private readonly name: string;
  private readonly bot: Bot;

  constructor(
    private readonly dataSource: DataSource,
    private readonly configService: ConfigService,
    private readonly minecraftService: MinecraftService,
  ) {
    this.name = this.configService.getOrThrow('MINECRAFT_NAME');
    this.bot = new Bot(this.configService.getOrThrow('TG_TOKEN'), {
      polling: true,
    });
  }

  public async onModuleInit() {
    this.bot.onText(/\/start/, this.handleStartCommand.bind(this));

    this.bot.on('message', this.handleMessage.bind(this));
  }

  private async handleStartCommand(msg: any) {
    try {
      const firstName = msg.from?.first_name || '–¥—Ä—É–≥';
      const welcomeMessage = `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã

–Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é —Å—Ç–∞—Ç—É—Å Minecraft —Å–µ—Ä–≤–µ—Ä–∞. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "${BotCommands.STATUS}", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.`;

      await this.bot.sendMessage(msg.chat.id, welcomeMessage, {
        reply_markup: {
          keyboard: [[{ text: BotCommands.STATUS }]],
          resize_keyboard: true,
          one_time_keyboard: false,
        },
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    }
  }

  private async handleMessage(msg: any) {
    if (!msg.text) return;

    const command = msg.text.trim();

    switch (command) {
      case BotCommands.STATUS:
        await this.handleStatusCommand(msg);
        break;

      case BotCommands.START:
        break;

      default:
        await this.bot.sendMessage(msg.chat.id, '–ò–∑–≤–∏–Ω–∏c—å, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
        break;
    }
  }

  private async handleStatusCommand(msg: any) {
    const chatId = msg.chat.id;
    try {
      const serverStatus = await this.minecraftService.getOrThrow({
        name: this.name,
        manager: this.dataSource.manager,
      });

      const message = serverStatus.status
        ? this.getActiveServerMessage(serverStatus)
        : `–°–µ—Ä–≤–µ—Ä ${serverStatus.name} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. üòû`;

      await this.bot.sendMessage(chatId, message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
      await this.bot.sendMessage(chatId, '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    }
  }

  private getActiveServerMessage(serverStatus: ServerModel): string {
    const players =
      serverStatus.users.map((user) => user.name).join(', ') || '–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤';
    return `–°–µ—Ä–≤–µ—Ä ${serverStatus.name} –∞–∫—Ç–∏–≤–µ–Ω! üéâ

–û–Ω–ª–∞–π–Ω: ${serverStatus.online}/${serverStatus.max}
–ò–≥—Ä–æ–∫–∏: ${players}`;
  }
}
